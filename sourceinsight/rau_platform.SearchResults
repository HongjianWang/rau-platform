---- ip_output_if Matches (93 in 24 files) ----
Icmp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4):      ret = ip_output_if(p, &(iphdr->src), IP_HDRINCL,
Icmp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4):        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
Icmp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4):      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
Icmp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4):        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
Icmp.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4):      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
Icmp.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4):        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
Icmp6.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv6):    ip_output_if (p, &(iphdr->src), IP_HDRINCL,
Icmp6.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv6):    ip_output_if (p, &(iphdr->src), IP_HDRINCL,
Icmp6.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv6):    ip_output_if (p, &(iphdr->src), IP_HDRINCL,
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4):ip_output_if(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4): * Same as ip_output_if() but with the possibility to include IP options:
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], netif->num));
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4): * Simple interface to ip_output_if. It finds the outgoing network
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4): * interface and calls upon ip_output_if to do the actual work.
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4): *         see ip_output_if() for more return values
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4):  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4): *  before calling ip_output_if.
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4): *        calling ip_output_if()
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4): *         see ip_output_if() for more return values
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4):  err = ip_output_if(p, src, dest, ttl, tos, proto, netif);
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4):ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4): * Same as ip_output_if() but with the possibility to include IP options:
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], netif->num));
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4): * Simple interface to ip_output_if. It finds the outgoing network
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4): * interface and calls upon ip_output_if to do the actual work.
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4): *         see ip_output_if() for more return values
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4):  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4): *  before calling ip_output_if.
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4): *        calling ip_output_if()
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4): *         see ip_output_if() for more return values
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4):  err = ip_output_if(p, src, dest, ttl, tos, proto, netif);
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4):ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4): * Same as ip_output_if() but with the possibility to include IP options:
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], netif->num));
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4): * Simple interface to ip_output_if. It finds the outgoing network
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4): * interface and calls upon ip_output_if to do the actual work.
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4): *         see ip_output_if() for more return values
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4):  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4): *  before calling ip_output_if.
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4): *        calling ip_output_if()
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4): *         see ip_output_if() for more return values
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4):  err = ip_output_if(p, src, dest, ttl, tos, proto, netif);
Ip.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\ipv4\lwip):/* This is passed as the destination address to ip_output_if (not
Ip.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\ipv4\lwip):err_t ip_output_if(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\ipv6\lwip):/* This is passed as the destination address to ip_output_if (not
Ip.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\ipv6\lwip):err_t ip_output_if(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\ipv4\lwip):/* This is passed as the destination address to ip_output_if (not
Ip.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\ipv4\lwip):err_t ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
Ip.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\ipv6\lwip):/* This is passed as the destination address to ip_output_if (not
Ip.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\ipv6\lwip):err_t ip_output_if(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip.h (f:\project_st\rau_platform\components\net\lwip\src\include\ipv4\lwip):/* This is passed as the destination address to ip_output_if (not
Ip.h (f:\project_st\rau_platform\components\net\lwip\src\include\ipv4\lwip):err_t ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
Ip.h (f:\project_st\rau_platform\components\net\lwip\src\include\ipv6\lwip):/* This is passed as the destination address to ip_output_if (not
Ip.h (f:\project_st\rau_platform\components\net\lwip\src\include\ipv6\lwip):err_t ip_output_if(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv6):/* ip_output_if:
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv6):ip_output_if (struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c (len %"U16_F")\n", netif->name[0], netif->name[1], p->tot_len));
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv6):  PERF_STOP("ip_output_if");
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv6): * Simple interface to ip_output_if. It finds the outgoing network interface and
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv6): * calls upon ip_output_if to do the actual work.
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv6):  return ip_output_if (p, src, dest, ttl, proto, netif);
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv6):  err = ip_output_if(p, src, dest, ttl, tos, proto, netif);
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv6):/* ip_output_if:
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv6):ip_output_if (struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c (len %"U16_F")\n", netif->name[0], netif->name[1], p->tot_len));
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv6):  PERF_STOP("ip_output_if");
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv6): * Simple interface to ip_output_if. It finds the outgoing network interface and
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv6): * calls upon ip_output_if to do the actual work.
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv6):  return ip_output_if (p, src, dest, ttl, proto, netif);
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv6):  err = ip_output_if(p, src, dest, ttl, tos, proto, netif);
Ip6.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv6):/* ip_output_if:
Ip6.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv6):ip_output_if (struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip6.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c (len %"U16_F")\n", netif->name[0], netif->name[1], p->tot_len));
Ip6.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv6):  PERF_STOP("ip_output_if");
Ip6.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv6): * Simple interface to ip_output_if. It finds the outgoing network interface and
Ip6.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv6): * calls upon ip_output_if to do the actual work.
Ip6.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv6):  return ip_output_if (p, src, dest, ttl, proto, netif);
Ip6.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv6):  err = ip_output_if(p, src, dest, ttl, tos, proto, netif);
Raw.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):  err = ip_output_if (q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
Raw.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  err = ip_output_if (q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
Raw.c (f:\project_st\rau_platform\components\net\lwip\src\core):  err = ip_output_if (q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
Udp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));
Udp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDPLITE, netif);
Udp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
Udp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
Udp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));
Udp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDPLITE, netif);
Udp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
Udp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
Udp.c (f:\project_st\rau_platform\components\net\lwip\src\core):    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));
Udp.c (f:\project_st\rau_platform\components\net\lwip\src\core):    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDPLITE, netif);
Udp.c (f:\project_st\rau_platform\components\net\lwip\src\core):    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
Udp.c (f:\project_st\rau_platform\components\net\lwip\src\core):    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
---- ip_output_hinted Matches (21 in 12 files) ----
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv4):ip_output_hinted(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv4):ip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
Ip.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv4):ip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
Ip.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\ipv4\lwip):err_t ip_output_hinted(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\ipv4\lwip):err_t ip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
Ip.h (f:\project_st\rau_platform\components\net\lwip\src\include\ipv4\lwip):err_t ip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core\ipv6):ip_output_hinted(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip6.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core\ipv6):ip_output_hinted(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Ip6.c (f:\project_st\rau_platform\components\net\lwip\src\core\ipv6):ip_output_hinted(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
---- tcp_output_segment Matches (19 in 3 files) ----
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):static void tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb);
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    tcp_output_segment(seg, pcb);
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_output_segment: rtseq %"U32_F"\n", pcb->rtseq));
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):static void tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb);
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core): * functions other than the default tcp_output -> tcp_output_segment
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    tcp_output_segment(seg, pcb);
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_output_segment: rtseq %"U32_F"\n", pcb->rtseq));
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):                  ("tcp_output_segment: calculated checksum is %"X16_F" instead of %"X16_F"\n",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):static void tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb);
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core): * functions other than the default tcp_output -> tcp_output_segment
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):    tcp_output_segment(seg, pcb);
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_output_segment: rtseq %"U32_F"\n", pcb->rtseq));
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):                  ("tcp_output_segment: calculated checksum is %"X16_F" instead of %"X16_F"\n",
---- tcp_output Matches (118 in 18 files) ----
Api_msg.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\api):    /* tcp_enqueue returned ERR_MEM, try tcp_output anyway */
Api_msg.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\api):    err = tcp_output(conn->pcb.tcp);
Api_msg.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\api):      tcp_output(conn->pcb.tcp);
Api_msg.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\api):      /* tcp_write returned ERR_MEM, try tcp_output anyway */
Api_msg.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\api):      tcp_output(conn->pcb.tcp);
Api_msg.c (f:\project_st\rau_platform\components\net\lwip\src\api):      tcp_output(conn->pcb.tcp);
Api_msg.c (f:\project_st\rau_platform\components\net\lwip\src\api):      /* tcp_write returned ERR_MEM, try tcp_output anyway */
Api_msg.c (f:\project_st\rau_platform\components\net\lwip\src\api):      tcp_output(conn->pcb.tcp);
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):       to make sure tcp_output doesn't fail.
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):       for the return value of tcp_output for now. */
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):          tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):       to make sure tcp_output doesn't fail.
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):       for the return value of tcp_output for now. */
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):          tcp_output(prev);
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):        tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip\src\core):       to make sure tcp_output doesn't fail.
Tcp.c (f:\project_st\rau_platform\components\net\lwip\src\core):       for the return value of tcp_output for now. */
Tcp.c (f:\project_st\rau_platform\components\net\lwip\src\core):    tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip\src\core):    tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip\src\core):    tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip\src\core):          tcp_output(prev);
Tcp.c (f:\project_st\rau_platform\components\net\lwip\src\core):      tcp_output(pcb);
Tcp.c (f:\project_st\rau_platform\components\net\lwip\src\core):    tcp_output(pcb);
Tcp.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\lwip):err_t            tcp_output  (struct tcp_pcb *pcb);
Tcp.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\lwip):#define tcp_output_nagle(tpcb) (tcp_do_output_nagle(tpcb) ? tcp_output(tpcb) : ERR_OK)
Tcp.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\lwip):   * @return ERR_OK: try to send some data by calling tcp_output
Tcp.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\lwip):   * @return ERR_OK: try to send some data by calling tcp_output
Tcp.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\lwip):   * @return ERR_OK: try to send some data by calling tcp_output
Tcp.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\lwip):      tcp_output(pcb);                             \
Tcp.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\lwip):    tcp_output(pcb);                               \
Tcp.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\lwip): * @return ERR_OK: try to send some data by calling tcp_output
Tcp.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\lwip): * @return ERR_OK: try to send some data by calling tcp_output
Tcp.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\lwip):err_t            tcp_output  (struct tcp_pcb *pcb);
Tcp.h (f:\project_st\rau_platform\components\net\lwip\src\include\lwip): * @return ERR_OK: try to send some data by calling tcp_output
Tcp.h (f:\project_st\rau_platform\components\net\lwip\src\include\lwip): * @return ERR_OK: try to send some data by calling tcp_output
Tcp.h (f:\project_st\rau_platform\components\net\lwip\src\include\lwip):err_t            tcp_output  (struct tcp_pcb *pcb);
Tcp_impl.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\lwip):#define tcp_output_nagle(tpcb) (tcp_do_output_nagle(tpcb) ? tcp_output(tpcb) : ERR_OK)
Tcp_impl.h (f:\project_st\rau_platform\components\net\lwip\src\include\lwip):#define tcp_output_nagle(tpcb) (tcp_do_output_nagle(tpcb) ? tcp_output(tpcb) : ERR_OK)
Tcp_in.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):        tcp_output(pcb);
Tcp_in.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    return tcp_output(npcb);
Tcp_in.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    return tcp_output(pcb);
Tcp_in.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):        tcp_output(pcb);
Tcp_in.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    return tcp_output(npcb);
Tcp_in.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    return tcp_output(pcb);
Tcp_in.c (f:\project_st\rau_platform\components\net\lwip\src\core):        tcp_output(pcb);
Tcp_in.c (f:\project_st\rau_platform\components\net\lwip\src\core):    return tcp_output(npcb);
Tcp_in.c (f:\project_st\rau_platform\components\net\lwip\src\core):    return tcp_output(pcb);
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core): * To prompt the system to send data now, call tcp_output() after
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):tcp_output(struct tcp_pcb *pcb)
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: nothing to send (%p)\n",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"U16_F
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):                ("tcp_output: snd_wnd %"U16_F", cwnd %"U16_F", wnd %"U32_F
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):     *   RST is no sent using tcp_enqueue/tcp_output.
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"U16_F", cwnd %"U16_F", wnd %"U32_F", effwnd %"U32_F", seq %"U32_F", ack %"U32_F", i %"S16_F"\n",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core): * Called by tcp_output() to actually send a TCP segment over IP.
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):  tcp_output(pcb);
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):  /* No need to call tcp_output: we are always called from tcp_input()
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\core):     and thus tcp_output directly returns. */
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core): * functions other than the default tcp_output -> tcp_output_segment
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  /* ackno is set in tcp_output */
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  /* wnd and chksum are set in tcp_output */
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core): * To prompt the system to send data now, call tcp_output() after
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):tcp_output(struct tcp_pcb *pcb)
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: nothing to send (%p)\n",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"U16_F
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):                ("tcp_output: snd_wnd %"U16_F", cwnd %"U16_F", wnd %"U32_F
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):     *   RST is no sent using tcp_write/tcp_output.
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"U16_F", cwnd %"U16_F", wnd %"U32_F", effwnd %"U32_F", seq %"U32_F", ack %"U32_F", i %"S16_F"\n",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core): * Called by tcp_output() to actually send a TCP segment over IP.
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  tcp_output(pcb);
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):  /* No need to call tcp_output: we are always called from tcp_input()
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\core):     and thus tcp_output directly returns. */
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core): * functions other than the default tcp_output -> tcp_output_segment
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):  /* ackno is set in tcp_output */
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):  /* wnd and chksum are set in tcp_output */
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core): * To prompt the system to send data now, call tcp_output() after
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):tcp_output(struct tcp_pcb *pcb)
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: nothing to send (%p)\n",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"U16_F
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):                ("tcp_output: snd_wnd %"U16_F", cwnd %"U16_F", wnd %"U32_F
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):     *   RST is no sent using tcp_write/tcp_output.
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"U16_F", cwnd %"U16_F", wnd %"U32_F", effwnd %"U32_F", seq %"U32_F", ack %"U32_F", i %"S16_F"\n",
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core): * Called by tcp_output() to actually send a TCP segment over IP.
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):  tcp_output(pcb);
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):  /* No need to call tcp_output: we are always called from tcp_input()
Tcp_out.c (f:\project_st\rau_platform\components\net\lwip\src\core):     and thus tcp_output directly returns. */
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  /*err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):    err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):    err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
Test_tcp.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\test\unit\tcp):  err = tcp_output(pcb);
---- do_write Matches (18 in 9 files) ----
Api_lib.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\api):  msg.function = do_write;
Api_lib.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\api):     but if it is, this is done inside api_msg.c:do_write(), so we can use the
Api_lib.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\api):  msg.function = do_write;
Api_lib.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\api):     but if it is, this is done inside api_msg.c:do_write(), so we can use the
Api_lib.c (f:\project_st\rau_platform\components\net\lwip\src\api):  msg.function = do_write;
Api_lib.c (f:\project_st\rau_platform\components\net\lwip\src\api):     but if it is, this is done inside api_msg.c:do_write(), so we can use the
Api_msg.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\api): * Called initially from do_write. If the first call can't send all data
Api_msg.c (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\api):do_write(struct api_msg_msg *msg)
Api_msg.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\api): * Called initially from do_write. If the first call can't send all data
Api_msg.c (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\api):do_write(struct api_msg_msg *msg)
Api_msg.c (f:\project_st\rau_platform\components\net\lwip\src\api): * Called initially from do_write. If the first call can't send all data
Api_msg.c (f:\project_st\rau_platform\components\net\lwip\src\api):do_write(struct api_msg_msg *msg)
Api_msg.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\lwip):    /** used for do_write */
Api_msg.h (f:\project_st\rau_platform\components\net\lwip-1.3.2\src\include\lwip):void do_write           ( struct api_msg_msg *msg);
Api_msg.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\lwip):    /** used for do_write */
Api_msg.h (f:\project_st\rau_platform\components\net\lwip-1.4.1\src\include\lwip):void do_write           ( struct api_msg_msg *msg);
Api_msg.h (f:\project_st\rau_platform\components\net\lwip\src\include\lwip):    /** used for do_write */
Api_msg.h (f:\project_st\rau_platform\components\net\lwip\src\include\lwip):void do_write           ( struct api_msg_msg *msg);
---- sem_lock Matches (13 in 2 files) ----
Dm9000a.c (f:\project_st\rau_platform\bsp\stm32f10x\drivers):static struct rt_semaphore sem_ack, sem_lock;
Dm9000a.c (f:\project_st\rau_platform\bsp\stm32f10x\drivers):    rt_sem_take(&sem_lock, RT_WAITING_FOREVER);
Dm9000a.c (f:\project_st\rau_platform\bsp\stm32f10x\drivers):    rt_sem_release(&sem_lock);
Dm9000a.c (f:\project_st\rau_platform\bsp\stm32f10x\drivers):    rt_sem_take(&sem_lock, RT_WAITING_FOREVER);
Dm9000a.c (f:\project_st\rau_platform\bsp\stm32f10x\drivers):    rt_sem_release(&sem_lock);
Dm9000a.c (f:\project_st\rau_platform\bsp\stm32f10x\drivers):    rt_sem_init(&sem_lock, "eth_lock", 1, RT_IPC_FLAG_FIFO);
Semaphore_producer_consumer.c (f:\project_st\rau_platform\examples\kernel):struct rt_semaphore sem_lock;
Semaphore_producer_consumer.c (f:\project_st\rau_platform\examples\kernel):        rt_sem_take(&sem_lock, RT_WAITING_FOREVER);
Semaphore_producer_consumer.c (f:\project_st\rau_platform\examples\kernel):        rt_sem_release(&sem_lock);
Semaphore_producer_consumer.c (f:\project_st\rau_platform\examples\kernel):        rt_sem_take(&sem_lock, RT_WAITING_FOREVER);
Semaphore_producer_consumer.c (f:\project_st\rau_platform\examples\kernel):        rt_sem_release(&sem_lock);
Semaphore_producer_consumer.c (f:\project_st\rau_platform\examples\kernel):    rt_sem_init(&sem_lock , "lock",     1,      RT_IPC_FLAG_FIFO);
Semaphore_producer_consumer.c (f:\project_st\rau_platform\examples\kernel):    rt_sem_detach(&sem_lock);
